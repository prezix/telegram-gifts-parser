import asyncio
import re
from telethon import TelegramClient, events
import aiosqlite

# ----------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telethon -----------------------
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:
api_id =         # –Ω–∞–ø—Ä–∏–º–µ—Ä, 123456
api_hash = ""   # –Ω–∞–ø—Ä–∏–º–µ—Ä, "abcdef123456..."
session_name = "my_session"  # –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏

# –ò–º–µ–Ω–∞ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤ (username –∏–ª–∏ ID) –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
SALES_CHANNEL = "GiftNotification"           # –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
FLOOR_CHANNEL = "GiftChangesFloorPrices"       # –∫–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ü–µ–Ω –ø–æ–¥–∞—Ä–∫–æ–≤

# ----------------------- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã -----------------------
def format_date(dt):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: 2025.01.13 - 03:13:19
    """
    return dt.strftime("%Y.%m.%d - %H:%M:%S") if dt else ""

# ----------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î -----------------------
DB_FILE = 'gifts.db'
db = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î


import re

def remove_markdown(text: str) -> str:
    """
    –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏:
      - –¥–≤–æ–π–Ω—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ **...**
      - –¥–≤–æ–π–Ω—ã–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è __...__
      - –∞ —Ç–∞–∫–∂–µ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞) –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    """
    # 1) –ó–∞–º–µ–Ω—è–µ–º **...** –Ω–∞ –ø—Ä–æ—Å—Ç–æ ...
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
    # 2) –ó–∞–º–µ–Ω—è–µ–º __...__ –Ω–∞ –ø—Ä–æ—Å—Ç–æ ...
    text = re.sub(r'__(.*?)__', r'\1', text)
    # 3) –ó–∞–º–µ–Ω—è–µ–º [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞) –Ω–∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    text = re.sub(r'\[(.*?)\]\(https?:\/\/[^\)]+\)', r'\1', text)
    return text


async def init_db():
    global db
    db = await aiosqlite.connect(DB_FILE)
    await db.execute('''
        CREATE TABLE IF NOT EXISTS gifts (
            id INTEGER PRIMARY KEY,
            name TEXT UNIQUE,
            total_count INTEGER,
            base_star_cost REAL
        )
    ''')
    await db.execute('''
        CREATE TABLE IF NOT EXISTS prices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            gift_name TEXT,
            date TEXT,
            delta_ton REAL,
            floor_ton REAL,
            floor_usd REAL,
            floor_star REAL,
            floor_rub REAL,
            average_ton REAL,
            average_usd REAL,
            average_star REAL,
            average_rub REAL
        )
    ''')
    await db.execute('''
        CREATE TABLE IF NOT EXISTS sales (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            message_id INTEGER UNIQUE,
            gift_name TEXT,
            price_ton REAL,
            date TEXT
        )
    ''')
    await db.commit()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# ----------------------- –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ -----------------------
def parse_sale_message(message):
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –ø–æ–¥–∞—Ä–∫–∞.
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
    
    Gift Sold 
    
    Vintage Cigar #17369 (https://t.me/nft/VintageCigar-1476)
    
    Price: 5.5 TON
    """
    text = message.text
    if not text:
        return None
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ
    lines = [line.strip() for line in text.splitlines() if line.strip()]
    if not lines or "Gift Sold" not in lines[0]:
        return None
    if len(lines) < 3:
        return None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
    gift_line = lines[1]
    m = re.match(r"(.+?)\s*\(", gift_line)
    gift_name = m.group(1).strip() if m else gift_line.strip()

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–æ–π
    price_ton = None
    for line in lines:
        if "Price:" in line:
            m_price = re.search(r"Price:\s*([-+]?\d*[\.,]?\d+)", line)
            if m_price:
                try:
                    price_ton = float(m_price.group(1).replace(",", "."))
                except ValueError:
                    price_ton = None
                break

    if price_ton is None:
        return None

    return {
        "message_id": message.id,
        "gift_name": gift_name,
        "price_ton": price_ton,
        "date": format_date(message.date)
    }

def parse_floor_message(message):
    raw_text = message.text
    if not raw_text:
        return None

    # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å markdown
    text = remove_markdown(raw_text)

    # –¢–µ–ø–µ—Ä—å text –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
    # "Flying Broom +0.01 TON üìà
    #   Floor Tonnel: 0,69 TON ‚âà 2,58 USD ‚âà 172 ‚≠êÔ∏è ‚âà 235 ‚ÇΩ
    #   ...
    #   Average Tonnel: 0,71 TON ‚âà 2,64 USD ‚âà 176 ‚≠êÔ∏è ‚âà 241 ‚ÇΩ"

    lines = [line.strip() for line in text.splitlines() if line.strip()]
    if not lines:
        return None

    # --- 1) –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: "Flying Broom +0.01 TON"
    #     (—Ä–∞–Ω—å—à–µ —É –Ω–∞—Å –±—ã–ª–æ "Flying Broom (https://...)", —Ç–µ–ø–µ—Ä—å —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç)
    first_line = lines[0]
    # –ú–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–∫—É –ø–æ–¥ "–ù–∞–∑–≤–∞–Ω–∏–µ +0.01 TON":
    m = re.match(r'^(.+?)\s+([-+]?\d*[.,]?\d+)\s*TON', first_line)
    if not m:
        return None

    gift_name = m.group(1).strip()
    delta_str = m.group(2).replace(',', '.')
    try:
        delta_ton = float(delta_str)
    except ValueError:
        return None

    # --- 2) –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ Floor Tonnel: ... –∏ Average Tonnel: ...
    floor_ton = floor_usd = floor_star = floor_rub = None
    average_ton = average_usd = average_star = average_rub = None

    # –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è "X TON ‚âà Y USD ‚âà Z ‚≠êÔ∏è ‚âà W ‚ÇΩ"
    pattern_tonnel = r'([-+]?\d*[.,]?\d+)\s*TON\s*‚âà\s*([-+]?\d*[.,]?\d+)\s*USD\s*‚âà\s*([-+]?\d*[.,]?\d+)\s*\S*\s*‚âà\s*([-+]?\d*[.,]?\d+)'

    for line in lines[1:]:
        if line.startswith("Floor Tonnel"):
            m_floor = re.search(pattern_tonnel, line)
            if m_floor:
                floor_ton  = float(m_floor.group(1).replace(',', '.').replace(' ', ''))
                floor_usd  = float(m_floor.group(2).replace(',', '.').replace(' ', ''))
                floor_star = float(m_floor.group(3).replace(',', '.').replace(' ', ''))
                floor_rub  = float(m_floor.group(4).replace(',', '.').replace(' ', ''))

        elif line.startswith("Average Tonnel"):
            m_avg = re.search(pattern_tonnel, line)
            if m_avg:
                average_ton  = float(m_avg.group(1).replace(',', '.').replace(' ', ''))
                average_usd  = float(m_avg.group(2).replace(',', '.').replace(' ', ''))
                average_star = float(m_avg.group(3).replace(',', '.').replace(' ', ''))
                average_rub  = float(m_avg.group(4).replace(',', '.').replace(' ', ''))

    return {
        "gift_name": gift_name,
        "delta_ton": delta_ton,
        "floor_ton": floor_ton,
        "floor_usd": floor_usd,
        "floor_star": floor_star,
        "floor_rub": floor_rub,
        "average_ton": average_ton,
        "average_usd": average_usd,
        "average_star": average_star,
        "average_rub": average_rub,
        "date": format_date(message.date),
    }


# ----------------------- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î -----------------------
async def insert_gift(gift_name):
    if gift_name and gift_name.strip():
        try:
            await db.execute("INSERT OR IGNORE INTO gifts (name) VALUES (?)", (gift_name.strip(),))
            await db.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞ '{gift_name}': {e}")

async def insert_price_data(data):
    async with db.execute("SELECT id FROM prices WHERE gift_name = ? AND date = ?", (data["gift_name"], data["date"])) as cursor:
        row = await cursor.fetchone()
        if row is not None:
            print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ '{data['gift_name']}' —Å –¥–∞—Ç–æ–π {data['date']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É.")
            return

    await db.execute('''
        INSERT INTO prices (
            gift_name, date, delta_ton, floor_ton, floor_usd,
            floor_star, floor_rub, average_ton, average_usd, average_star, average_rub
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        data["gift_name"],
        data["date"],
        data["delta_ton"],
        data["floor_ton"],
        data["floor_usd"],
        data["floor_star"],
        data["floor_rub"],
        data["average_ton"],
        data["average_usd"],
        data["average_star"],
        data["average_rub"]
    ))
    await db.commit()

async def insert_sale_data(data):
    async with db.execute("SELECT id FROM sales WHERE message_id = ?", (data["message_id"],)) as cursor:
        row = await cursor.fetchone()
        if row is not None:
            print(f"–ó–∞–ø–∏—Å—å —Å message_id {data['message_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

    await db.execute('''
        INSERT INTO sales (message_id, gift_name, price_ton, date)
        VALUES (?, ?, ?, ?)
    ''', (data["message_id"], data["gift_name"], data["price_ton"], data["date"]))
    await db.commit()

# ----------------------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å Telethon -----------------------
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Telethon –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    client = TelegramClient(session_name, api_id, api_hash)
    await client.start()
    print("–¢–µ–ª–µ–≥—Ä–∞–º-–∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    @client.on(events.NewMessage(chats=SALES_CHANNEL))
    async def handler_sales(event):
        sale_data = parse_sale_message(event.message)
        if sale_data:
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–∞—Ä–∫–∞: {sale_data['gift_name']} –ø–æ —Ü–µ–Ω–µ: {sale_data['price_ton']} TON")
            await insert_sale_data(sale_data)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ü–µ–Ω (Gift Floor Prices)
    @client.on(events.NewMessage(chats=FLOOR_CHANNEL))
    async def handler_floor(event):
        # –°–º–æ—Ç—Ä–∏–º —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("New floor message:", event.message.text)

        floor_data = parse_floor_message(event.message)
        if floor_data:
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã: {floor_data}")
            # –î–æ–ø—É—Å—Ç–∏–º, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            await insert_gift(floor_data["gift_name"])
            await insert_price_data(floor_data)
        else:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–º.")


    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
