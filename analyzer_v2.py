import nest_asyncio
nest_asyncio.apply()
import matplotlib.dates as mdates

import asyncio
import aiosqlite
import logging
import io
from datetime import datetime, timedelta
import matplotlib
matplotlib.use('Agg')  # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π backend

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression, RANSACRegressor
from telegram import InputMediaPhoto
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# –î–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è (Holt)
from statsmodels.tsa.holtwinters import ExponentialSmoothing

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

gift_db = None
user_db = None

# –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—è–º –≤ —Ç–∞–±–ª–∏—Ü–µ gifts)
GIFT_LIST = [
    "Precious Peach", "Spiced Wine", "Perfume Bottle", "Magic Potion",
    "Evil Eye", "Sharp Tongue", "Scared Cat", "Trapped Heart",
    "Skull Flower", "Homemade Cake", "Santa Hat", "Kissed Frog",
    "Spy Agaric", "Vintage Cigar", "Signet Ring", "Plush Pepe",
    "Eternal Rose", "Durov's Cap", "Berry Box", "Hex Pot",
    "Jelly Bunny", "Lunar Snake", "Party Sparkler", "Witch Hat",
    "Jester Hat", "Desk Calendar", "Snow Mittens", "Cookie Heart",
    "Jingle Bells", "Hanging Star", "Love Candle", "Mad Pumpkin",
    "Voodoo Doll", "B-Day Candle", "Bunny Muffin", "Hypno Lollipop",
    "Crystal Ball", "Eternal Candle", "Flying Broom", "Lol Pop",
    "Ginger Cookie", "Star Notepad", "Love Potion", "Toy Bear",
    "Diamond Ring","Loot Bag"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è rate limiting (user_id: last_command_time)
user_last_command = {}
COMMAND_COOLDOWN = 2

def rate_limit(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        now = datetime.now()
        last_time = user_last_command.get(user_id)
        if last_time and (now - last_time).total_seconds() < COMMAND_COOLDOWN:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")
            return
        user_last_command[user_id] = now
        return await func(update, context)
    return wrapper

def parse_date(date_str: str) -> datetime:
    try:
        return datetime.strptime(date_str, "%Y.%m.%d - %H:%M:%S")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {date_str}: {e}")
        raise e

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
async def init_gift_db():
    global gift_db
    gift_db = await aiosqlite.connect('gifts.db')
    await gift_db.execute("PRAGMA foreign_keys = ON;")
    await gift_db.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def init_user_db():
    global user_db
    user_db = await aiosqlite.connect('users.db')
    await user_db.execute("PRAGMA foreign_keys = ON;")
    await user_db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            chat_id INTEGER,
            join_date TEXT,
            command_count INTEGER DEFAULT 0
        );
    """)
    await user_db.commit()

async def register_user(update: Update):
    user = update.effective_user
    chat_id = update.effective_chat.id
    join_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    async with user_db.execute("SELECT user_id FROM users WHERE user_id = ?", (user.id,)) as cursor:
        exists = await cursor.fetchone()
    if not exists:
        await user_db.execute(
            "INSERT INTO users (user_id, username, chat_id, join_date, command_count) VALUES (?, ?, ?, ?, ?)",
            (user.id, user.username, chat_id, join_date, 1)
        )
    else:
        await user_db.execute(
            "UPDATE users SET command_count = command_count + 1 WHERE user_id = ?",
            (user.id,)
        )
    await user_db.commit()

@rate_limit
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await register_user(update)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ (—Ü–µ–Ω—ã –≤ TON).\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/gifts ‚Äì –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏\n"
        "/gift <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ\n"
        "/forecast <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äì –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã (TON)\n"
        "/detailed <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äì –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–∞—Ä–∫–∞\n"
        "/myprofile ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "/help ‚Äì –ø–æ–º–æ—â—å"
    )

@rate_limit
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await register_user(update)
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/gift <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ\n"
        "/forecast <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äì –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã (TON)\n"
        "/detailed <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äì –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–∞—Ä–∫–∞\n"
        "/gifts ‚Äì –í—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏\n"
        "/myprofile ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "/help ‚Äì –ü–æ–º–æ—â—å"
    )

@rate_limit
async def myprofile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await register_user(update)
    user = update.effective_user
    async with user_db.execute("SELECT username, join_date, command_count FROM users WHERE user_id = ?", (user.id,)) as cursor:
        record = await cursor.fetchone()
    if record:
        username, join_date, command_count = record
        text = (f"üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                f"Username: {username}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {join_date}\n"
                f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {command_count}")
    else:
        text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    await update.message.reply_html(text)

@rate_limit
async def gift_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞. –ü—Ä–∏–º–µ—Ä: /gift Perfume Bottle")
        return
    gift_name = " ".join(context.args)
    await register_user(update)

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—É –æ –ø–æ–¥–∞—Ä–∫–µ
    async with gift_db.execute("SELECT id, name, total_count FROM gifts WHERE name = ?", (gift_name,)) as cursor:
        gift = await cursor.fetchone()
    if not gift:
        await update.message.reply_text(f"–ü–æ–¥–∞—Ä–æ–∫ '{gift_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    gift_id, name, total_count = gift

    text = (f"üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ:</b>\n"
            f"ID: {gift_id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_count}\n")

    # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ delta_ton
    async with gift_db.execute("SELECT delta_ton FROM prices WHERE gift_name = ? ORDER BY date ASC", (gift_name,)) as cursor:
        rows = await cursor.fetchall()
    if rows:
        delta_values = [r[0] for r in rows if r[0] is not None]
        if delta_values:
            avg_delta = sum(delta_values)/len(delta_values)
            trend = "—Ä–∞—Å—Ç—É—Ç" if avg_delta > 0 else "–ø–∞–¥–∞—é—Ç" if avg_delta < 0 else "—Å—Ç–∞–±–∏–ª—å–Ω—ã"
            text += (f"\nüìä <b>–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω (TON):</b>\n"
                     f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (delta_ton): {avg_delta:.4f}\n"
                     f"–¢—Ä–µ–Ω–¥: —Ü–µ–Ω—ã {trend}.")
        else:
            text += "\n–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö delta_ton."
    else:
        text += "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    await update.message.reply_html(text)

@rate_limit
async def forecast_prices(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∏–¥—ë—Ç —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏ /gifts.
    """
    await register_user(update)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞. –ü—Ä–∏–º–µ—Ä: /forecast Perfume Bottle")
        return
    gift_name = " ".join(context.args)
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /gifts –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
    )

@rate_limit
async def detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞, —Ç–∞–∫ –∫–∞–∫ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
    """
    await register_user(update)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞. –ü—Ä–∏–º–µ—Ä: /detailed Perfume Bottle")
        return
    gift_name = " ".join(context.args)
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /gifts –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
    )

async def get_gift_info_text(gift_name: str) -> str:
    async with gift_db.execute("SELECT id, name, total_count FROM gifts WHERE name = ?", (gift_name,)) as cursor:
        gift = await cursor.fetchone()
    if not gift:
        return f"–ü–æ–¥–∞—Ä–æ–∫ '{gift_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
    gift_id, name, total_count = gift

    text = (f"üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ:</b>\n"
            f"ID: {gift_id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_count}\n")

    # –ê–Ω–∞–ª–∏–∑ delta_ton
    async with gift_db.execute("SELECT delta_ton FROM prices WHERE gift_name = ? ORDER BY date ASC", (gift_name,)) as cursor:
        rows = await cursor.fetchall()
    if rows:
        deltas = [r[0] for r in rows if r[0] is not None]
        if deltas:
            avg_d = sum(deltas)/len(deltas)
            trend = "—Ä–∞—Å—Ç—É—Ç" if avg_d > 0 else "–ø–∞–¥–∞—é—Ç" if avg_d < 0 else "—Å—Ç–∞–±–∏–ª—å–Ω—ã"
            text += (f"\nüìä <b>–ê–Ω–∞–ª–∏–∑ (TON):</b>\n"
                     f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (delta_ton): {avg_d:.4f}\n"
                     f"–¢—Ä–µ–Ω–¥: {trend}")
        else:
            text += "\n–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö delta_ton."
    else:
        text += "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    return text

def build_sub_buttons(gift_name: str) -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ (TON)", callback_data=f"forecast:{gift_name}"),
            InlineKeyboardButton("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"detailed:{gift_name}")
        ],
        [
            InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="list")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def display_gift_info(gift_name: str, query) -> None:
    text = await get_gift_info_text(gift_name)
    markup = build_sub_buttons(gift_name)
    if query.message.text:
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=markup)
    else:
        await query.edit_message_caption(caption=text, parse_mode='HTML', reply_markup=markup)

async def forecast_inline_otc(gift_name: str, query) -> None:
    """
    –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã (TON) –¥–ª—è OTC-—Ä—ã–Ω–∫–∞:
      - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü prices (–ø–æ–ª–µ floor_ton) –∏ sales (–ø–æ–ª–µ price_ton),
      - –°—Ç—Ä–æ–∏—Ç —Ç—Ä–∏ –º–æ–¥–µ–ª–∏: RANSAC, –æ–±—ã—á–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –∏ Holt (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ).
      - –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ = —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π.
    """
    combined_data = []

    # 1) –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prices (floor_ton)
    async with gift_db.execute("""
        SELECT date, floor_ton
        FROM prices
        WHERE gift_name = ? AND floor_ton IS NOT NULL
        ORDER BY date ASC
    """, (gift_name,)) as cursor:
        price_rows = await cursor.fetchall()
    for date_str, price_ton in price_rows:
        try:
            d = parse_date(date_str)
            combined_data.append((d, price_ton))
        except Exception:
            continue

    # 2) –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sales (price_ton)
    async with gift_db.execute("""
        SELECT date, price_ton
        FROM sales
        WHERE gift_name LIKE ?
        ORDER BY date ASC
    """, (f"{gift_name}%",)) as cursor:
        sales_rows = await cursor.fetchall()
    for date_str, price_ton in sales_rows:
        try:
            d = parse_date(date_str)
            combined_data.append((d, price_ton))
        except Exception:
            continue

    if not combined_data or len(combined_data) < 2:
        await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (TON) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞.")
        return

    # 3) –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ä—è–¥ –ø–æ –¥–∞—Ç–µ
    combined_data.sort(key=lambda x: x[0])
    dates = [item[0] for item in combined_data]
    prices = [item[1] for item in combined_data]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    X = np.array([d.toordinal() for d in dates]).reshape(-1, 1)
    y = np.array(prices)

    # –í–µ—Å–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–±–æ–ª—å—à–µ –≤–µ—Å–∞ ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–∞–Ω–Ω—ã–º)
    alpha = 0.1
    last_date_ord = dates[-1].toordinal()
    weights = np.exp(-alpha * (last_date_ord - X.flatten()))

    # –ú–æ–¥–µ–ª—å 1: RANSAC (—É—Å—Ç–æ–π—á–∏–≤–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)
    ransac = RANSACRegressor(estimator=LinearRegression(), max_trials=100, min_samples=0.6)
    ransac.fit(X, y, sample_weight=weights)

    future_date = dates[-1] + timedelta(days=1)
    future_day_ord = np.array([[future_date.toordinal()]])
    ransac_forecast = ransac.predict(future_day_ord)[0]
    ransac_forecast = max(ransac_forecast, 0)  # —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π

    # –ú–æ–¥–µ–ª—å 2: –æ–±—ã—á–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    lin_model = LinearRegression()
    lin_model.fit(X, y, sample_weight=weights)
    lin_future = lin_model.predict(future_day_ord)[0]
    lin_future = max(lin_future, 0)

    # –ú–æ–¥–µ–ª—å 3: Holt (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ)
    try:
        from statsmodels.tsa.holtwinters import ExponentialSmoothing
        holt_model = ExponentialSmoothing(y, trend="add", damped_trend=True, seasonal=None)
        holt_fit = holt_model.fit(optimized=True)
        holt_forecast = holt_fit.forecast(1)[0]
        holt_forecast = max(holt_forecast, 0)
    except Exception as e:
        logger.error(f"Holt model error: {e}")
        holt_forecast = lin_future

    # –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    final_forecast = (ransac_forecast + lin_future + holt_forecast) / 3.0

    # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
    import matplotlib.dates as mdates
    plt.figure(figsize=(12, 6))
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    plt.scatter(dates, y, color='blue', alpha=0.8, s=60, label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã (TON)")
    
    # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    plt.plot(dates, lin_model.predict(X), 'g--', linewidth=1.5, label="–õ–∏–Ω. —Ä–µ–≥—Ä–µ—Å—Å–∏—è")
    
    # RANSAC —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    plt.plot(dates, ransac.predict(X), 'r--', linewidth=1.5, label="RANSAC —Ä–µ–≥—Ä–µ—Å—Å–∏—è")
    
    # Holt —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    try:
        plt.plot(dates, holt_fit.fittedvalues, 'm--', linewidth=1.5, label="Holt —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ")
    except:
        pass

    # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ —Ç–æ—á–∫–∏
    plt.scatter(future_date, ransac_forecast, color='red', s=100, label=f"RANSAC –ø—Ä–æ–≥–Ω–æ–∑ ({ransac_forecast:.2f})")
    plt.scatter(future_date, lin_future, color='green', s=100, label=f"–õ–∏–Ω. –ø—Ä–æ–≥–Ω–æ–∑ ({lin_future:.2f})")
    plt.scatter(future_date, holt_forecast, color='magenta', s=100, label=f"Holt –ø—Ä–æ–≥–Ω–æ–∑ ({holt_forecast:.2f})")
    plt.scatter(future_date, final_forecast, color='black', s=120, label=f"–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ ({final_forecast:.2f})")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X –∫–∞–∫ –¥–∞—Ç—ã
    ax = plt.gca()
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
    plt.xticks(rotation=45)
    
    plt.ylim(bottom=0)
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶–µ–Ω–∞ (TON)")
    plt.title(f"OTC-–ø—Ä–æ–≥–Ω–æ–∑ (TON) –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞: {gift_name}")
    plt.grid(True, linestyle=':')
    plt.legend()
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    text = (
        f"üîÆ <b>OTC-–ø—Ä–æ–≥–Ω–æ–∑ (TON) –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞: {gift_name}</b>\n"
        f"–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {future_date.strftime('%Y-%m-%d')}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü prices (floor_ton) –∏ sales (price_ton).\n"
        f"–ú–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        f"  ‚Ä¢ RANSAC: {ransac_forecast:.2f} TON\n"
        f"  ‚Ä¢ –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: {lin_future:.2f} TON\n"
        f"  ‚Ä¢ Holt —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {holt_forecast:.2f} TON\n\n"
        f"–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (—Å—Ä–µ–¥–Ω–µ–µ): <b>{final_forecast:.2f} TON</b>"
    )

    markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"gift:{gift_name}")]])
    await query.edit_message_media(
        media=InputMediaPhoto(media=buf, caption=text, parse_mode='HTML'),
        reply_markup=markup
    )


# --- –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó (–ø—Ä–∏–º–µ—Ä) ---
async def detailed_inline(gift_name: str, query) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ
    async with gift_db.execute("SELECT id, name, total_count FROM gifts WHERE name = ?", (gift_name,)) as cursor:
        gift = await cursor.fetchone()
    if not gift:
        await query.edit_message_text(f"–ü–æ–¥–∞—Ä–æ–∫ '{gift_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    gift_id, name, total_count = gift

    combined_data = []

    # 1) –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prices (–ø–æ–ª–µ floor_ton)
    async with gift_db.execute("""
        SELECT date, floor_ton
        FROM prices
        WHERE gift_name = ? AND floor_ton IS NOT NULL
        ORDER BY date ASC
    """, (gift_name,)) as cursor:
        price_rows = await cursor.fetchall()
    for date_str, floor_ton in price_rows:
        try:
            d = parse_date(date_str)
            combined_data.append((d, floor_ton))
        except Exception:
            continue

    # 2) –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sales (–ø–æ–ª–µ price_ton)
    async with gift_db.execute("""
        SELECT date, price_ton
        FROM sales
        WHERE gift_name LIKE ?
        ORDER BY date ASC
    """, (f"{gift_name}%",)) as cursor:
        sales_rows = await cursor.fetchall()
    for date_str, price_ton in sales_rows:
        try:
            d = parse_date(date_str)
            combined_data.append((d, price_ton))
        except Exception:
            continue

    if not combined_data or len(combined_data) < 2:
        await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (TON) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ä—è–¥ –ø–æ –¥–∞—Ç–µ
    combined_data.sort(key=lambda x: x[0])
    dates = [item[0] for item in combined_data]
    ton_prices = [item[1] for item in combined_data]

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    import statistics
    mean_price = statistics.mean(ton_prices)
    min_price = min(ton_prices)
    max_price = max(ton_prices)
    std_price = statistics.stdev(ton_prices) if len(ton_prices) > 1 else 0

    # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    X = np.array([d.toordinal() for d in dates]).reshape(-1, 1)
    y = np.array(ton_prices)
    lin_model = LinearRegression()
    lin_model.fit(X, y)
    future_date = dates[-1] + timedelta(days=1)
    forecast_lin = lin_model.predict([[future_date.toordinal()]])[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    analysis_text = (
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (TON):</b>\n"
        f"–ü–æ–¥–∞—Ä–æ–∫: {name}\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_count}\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–µ (TON):\n"
        f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {mean_price:.2f}\n"
        f"  ‚Ä¢ –ú–∏–Ω: {min_price:.2f}, –ú–∞–∫—Å: {max_price:.2f}\n"
        f"  ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_price:.2f}\n"
        f"–õ–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {future_date.strftime('%Y-%m-%d')}: {forecast_lin:.2f} TON\n"
    )

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    import matplotlib.dates as mdates
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(dates, ton_prices, 'bo-', label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã (TON)")
    y_lin_pred = lin_model.predict(X)
    ax.plot(dates, y_lin_pred, 'r--', linewidth=1.5, label="–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è")
    ax.scatter(future_date, forecast_lin, color='green', s=100, label=f"–ü—Ä–æ–≥–Ω–æ–∑ ({forecast_lin:.2f} TON)")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X –∫–∞–∫ –¥–∞—Ç—ã
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
    plt.xticks(rotation=45)
    ax.set_ylim(bottom=0)

    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–¶–µ–Ω–∞ (TON)")
    ax.set_title(f"–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (TON) –¥–ª—è {name}")
    ax.grid(True, linestyle=':')
    ax.legend()
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"gift:{gift_name}")]])
    await query.edit_message_media(
        media=InputMediaPhoto(media=buf, caption=analysis_text, parse_mode='HTML'),
        reply_markup=markup
    )


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data
    await query.answer()
    if data.startswith("gift:"):
        gift_name = data.split(":", 1)[1]
        await display_gift_info(gift_name, query)
    elif data.startswith("forecast:"):
        gift_name = data.split(":", 1)[1]
        await forecast_inline_otc(gift_name, query)
    elif data.startswith("detailed:"):
        gift_name = data.split(":", 1)[1]
        await detailed_inline(gift_name, query)
    elif data == "list":
        await query.message.delete()
        keyboard = []
        row = []
        for gift in GIFT_LIST:
            row.append(InlineKeyboardButton(gift, callback_data=f"gift:{gift}"))
            if len(row) == 3:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=query.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:", reply_markup=markup)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

@rate_limit
async def list_gifts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await register_user(update)
    keyboard = []
    row = []
    for gift in GIFT_LIST:
        row.append(InlineKeyboardButton(gift, callback_data=f"gift:{gift}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:", reply_markup=markup)

async def main() -> None:
    await init_gift_db()
    await init_user_db()
    application = ApplicationBuilder().token("BOT-TOKEN").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("gifts", list_gifts_command))
    application.add_handler(CommandHandler("gift", gift_info))
    application.add_handler(CommandHandler("forecast", forecast_prices))
    application.add_handler(CommandHandler("detailed", detailed_analysis))
    application.add_handler(CommandHandler("myprofile", myprofile))
    application.add_handler(CallbackQueryHandler(handle_callback))

    logger.info("Bot started")
    await application.run_polling(close_loop=False)

if __name__ == '__main__':
    asyncio.run(main())
